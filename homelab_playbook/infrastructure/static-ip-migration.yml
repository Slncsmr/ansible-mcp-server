---
- name: Migrate servers to static IP addresses
  hosts: all
  become: yes
  vars:
    static_ips:
      linuxrwifi: 
        ip: "192.168.10.1/24"
        gateway: "192.168.10.1"
      homelab2: 
        ip: "192.168.10.10/24"
        gateway: "192.168.10.1"
      amdaiserver: 
        ip: "192.168.10.20/24"
        gateway: "192.168.10.1"
      truenas: 
        ip: "192.168.10.30/24"
        gateway: "192.168.10.1"
    dns_servers:
      - "192.168.10.1"  # Pi-hole
      - "1.1.1.1"       # Cloudflare backup

  tasks:
    - name: Backup current network configuration
      copy:
        src: "{{ item }}"
        dest: "{{ item }}.backup.{{ ansible_date_time.epoch }}"
        remote_src: yes
      with_items:
        - /etc/netplan/
        - /etc/network/interfaces
      ignore_errors: yes

    - name: Check if using netplan (Ubuntu)
      stat:
        path: /etc/netplan
      register: netplan_dir

    - name: Configure static IP with netplan (Ubuntu)
      when: netplan_dir.stat.exists
      block:
        - name: Find netplan config file
          find:
            paths: /etc/netplan
            patterns: "*.yaml,*.yml"
          register: netplan_files

        - name: Read current netplan config
          slurp:
            src: "{{ netplan_files.files[0].path }}"
          register: netplan_content
          when: netplan_files.files | length > 0

        - name: Create new netplan configuration
          copy:
            content: |
              network:
                version: 2
                renderer: networkd
                ethernets:
                  {{ ansible_default_ipv4.interface }}:
                    dhcp4: no
                    addresses:
                      - {{ static_ips[inventory_hostname].ip }}
                    gateway4: {{ static_ips[inventory_hostname].gateway }}
                    nameservers:
                      addresses: {{ dns_servers }}
            dest: /etc/netplan/01-static.yaml
            backup: yes
          when: inventory_hostname != 'linuxrwifi'

    - name: Configure static IP for Debian systems
      when: 
        - not netplan_dir.stat.exists
        - ansible_os_family == "Debian"
      block:
        - name: Configure /etc/network/interfaces
          blockinfile:
            path: /etc/network/interfaces
            block: |
              auto {{ ansible_default_ipv4.interface }}
              iface {{ ansible_default_ipv4.interface }} inet static
                address {{ static_ips[inventory_hostname].ip | ipaddr('address') }}
                netmask {{ static_ips[inventory_hostname].ip | ipaddr('netmask') }}
                gateway {{ static_ips[inventory_hostname].gateway }}
                dns-nameservers {{ dns_servers | join(' ') }}
            marker: "# {mark} ANSIBLE MANAGED STATIC IP CONFIG"

    - name: Update hosts file
      lineinfile:
        path: /etc/hosts
        line: "{{ static_ips[item].ip | ipaddr('address') }} {{ item }} {{ item }}.shaunjackson.space"
        state: present
      loop: "{{ static_ips.keys() | list }}"

    - name: Display migration plan
      debug:
        msg: |
          Server: {{ inventory_hostname }}
          Current IP: {{ ansible_default_ipv4.address }}
          New Static IP: {{ static_ips[inventory_hostname].ip }}
          
          IMPORTANT: After applying network changes, you may lose connection.
          You'll need to update your Ansible inventory with the new IPs.

    - name: Prompt for confirmation
      pause:
        prompt: "Review the changes above. Press Enter to apply network changes or Ctrl+C to abort"

    - name: Apply netplan configuration
      command: netplan apply
      when: netplan_dir.stat.exists
      async: 1
      poll: 0

    - name: Restart networking service (Debian)
      service:
        name: networking
        state: restarted
      when: 
        - not netplan_dir.stat.exists
        - ansible_os_family == "Debian"
      async: 1
      poll: 0