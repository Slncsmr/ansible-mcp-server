# ClouDNS DDNS Docker Compose Configuration
# This service automatically updates your ClouDNS subdomain with your current public IP

# SETUP INSTRUCTIONS:
#
# 1. SIGN UP FOR CLOUDNS:
#    - Visit https://www.cloudns.net
#    - Click "Sign Up" and create a free account
#    - Verify your email address
#
# 2. CREATE A FREE ZONE:
#    - Log into your ClouDNS account
#    - Go to "DNS Hosting" > "Free zones"
#    - Choose a free subdomain (e.g., yourname.cloudns.net, yourname.cloudns.ph, etc.)
#    - Click "Create"
#
# 3. GET YOUR API CREDENTIALS:
#    - Go to "API" > "API settings" in your account
#    - Enable API access if not already enabled
#    - Note your "auth-id" (usually your email)
#    - Create an API password if you haven't already
#
# 4. CONFIGURE THIS FILE:
#    - Replace YOUR_SUBDOMAIN with just the subdomain part (e.g., "homelab")
#    - Replace YOUR_AUTH_ID with your auth-id (usually your email)
#    - Replace YOUR_PASSWORD with your API password
#
# 5. UPDATE GODADDY DNS:
#    - Create CNAME records pointing to your ClouDNS domain
#    - Example: www.shaunjackson.space -> homelab.cloudns.net

version: '3.8'

services:
  cloudns-ddns:
    image: alpine:latest
    container_name: cloudns-ddns
    environment:
      # Your subdomain (without .cloudns.net)
      - CLOUDNS_SUBDOMAIN=YOUR_SUBDOMAIN
      # Your ClouDNS auth ID (usually your email)
      - CLOUDNS_AUTH_ID=YOUR_AUTH_ID
      # Your ClouDNS API password
      - CLOUDNS_AUTH_PASSWORD=YOUR_PASSWORD
      # Update interval (default: 5 minutes)
      - UPDATE_INTERVAL=300
    
    volumes:
      - ./cloudns-logs:/var/log
      - ./cloudns-ddns-setup.sh:/update-script.sh:ro
    
    command: |
      sh -c '
      apk add --no-cache curl bash
      chmod +x /update-script.sh
      
      # Create the update script with environment variables
      cat > /cloudns-update.sh << "EOF"
      #!/bin/bash
      API_URL="https://api.cloudns.net/dns/dyndns.php"
      
      while true; do
        CURRENT_IP=$$(curl -s https://ipv4.icanhazip.com)
        
        if [ -z "$$CURRENT_IP" ]; then
          echo "$$(date): Failed to get current IP" >> /var/log/cloudns-ddns.log
        else
          RESPONSE=$$(curl -s "$${API_URL}?id=$${CLOUDNS_AUTH_ID}&password=$${CLOUDNS_AUTH_PASSWORD}&host=$${CLOUDNS_SUBDOMAIN}")
          echo "$$(date): IP=$${CURRENT_IP} Response=$${RESPONSE}" >> /var/log/cloudns-ddns.log
          
          if [[ "$$RESPONSE" == *"OK"* ]]; then
            echo "$$(date): Successfully updated $${CLOUDNS_SUBDOMAIN}.cloudns.net to $${CURRENT_IP}" >> /var/log/cloudns-ddns.log
          else
            echo "$$(date): Update failed: $${RESPONSE}" >> /var/log/cloudns-ddns.log
          fi
        fi
        
        sleep $${UPDATE_INTERVAL}
      done
      EOF
      
      chmod +x /cloudns-update.sh
      exec /cloudns-update.sh
      '
    
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "pgrep", "sleep"]
      interval: 5m
      timeout: 10s
      retries: 3

# Alternative: Using ddclient (more robust solution)
  ddclient-cloudns:
    image: lscr.io/linuxserver/ddclient:latest
    container_name: ddclient-cloudns
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - ./ddclient:/config
    restart: unless-stopped
    profiles: ["ddclient"]  # Only runs if you use --profile ddclient

# DDCLIENT CONFIGURATION (Alternative method):
# If you prefer ddclient, create ./ddclient/ddclient.conf with:
#
# daemon=300
# syslog=yes
# pid=/var/run/ddclient.pid
# ssl=yes
# 
# protocol=cloudns
# server=api.cloudns.net
# login=YOUR_AUTH_ID
# password=YOUR_PASSWORD
# YOUR_SUBDOMAIN
#
# Then run with: docker-compose --profile ddclient up -d

# TESTING YOUR SETUP:
# 1. Check if your subdomain resolves:
#    dig yoursubdomain.cloudns.net
#
# 2. Check the logs:
#    docker-compose logs -f cloudns-ddns
#
# 3. Verify the IP is updating:
#    tail -f ./cloudns-logs/cloudns-ddns.log

# TROUBLESHOOTING:
# - "Invalid authentication" = Check your auth-id and password
# - "Invalid host" = Make sure you created the zone in ClouDNS first
# - No response = Check internet connectivity and firewall rules