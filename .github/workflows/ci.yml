name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm test
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ansible terraform
        ansible --version
        terraform --version
    
    - name: Run functional tests
      run: node tests/complete-functional-test.js
      env:
        NODE_ENV: test
    
    - name: Run regression tests
      run: sudo node tests/regression-tests.js
      continue-on-error: false
    
    - name: Start SSE server for tests
      run: |
        npm run start:sse &
        sleep 5
        curl http://localhost:3001/health
    
    - name: Run SSE regression tests
      run: node tests/sse-regression-tests.js
      env:
        API_ACCESS_TOKEN: test-token
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          tests/test-report.json
          tests/regression-test-report.json
          tests/sse-regression-report.json
  
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check for sensitive data
      run: |
        # Check for common sensitive patterns
        if grep -rE "(password|token|secret|key)[\s]*=[\s]*['\"]?[A-Za-z0-9]" --include="*.js" --include="*.json" --include="*.yml" --exclude-dir=node_modules --exclude-dir=.git .; then
          echo "Potential sensitive data found!"
          exit 1
        fi
    
    - name: Check for private IPs
      run: |
        # Check for private IP addresses
        if grep -rE "192\.168\.[0-9]+\.[0-9]+" --include="*.js" --include="*.json" --include="*.yml" --exclude-dir=node_modules --exclude-dir=tests --exclude="*.example" .; then
          echo "Private IP addresses found!"
          exit 1
        fi
  
  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ansible-mcp-server:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm ansible-mcp-server:${{ github.sha }} node --version
        docker run --rm ansible-mcp-server:${{ github.sha }} ansible --version
        docker run --rm ansible-mcp-server:${{ github.sha }} terraform --version
  
  release:
    runs-on: ubuntu-latest
    needs: [test, lint, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Check if version changed
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if tag exists
        if git ls-remote --tags origin | grep -q "refs/tags/v$VERSION"; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      if: steps.version.outputs.exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          ## Changes in this Release
          - See [CHANGELOG.md](CHANGELOG.md) for details
          
          ## Installation
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd ansible-mcp-server
          npm install
          ./setup.sh
          ```
        draft: false
        prerelease: false